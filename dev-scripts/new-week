#!/usr/bin/env bash

# Exit build script on first failure.
set -e

# Exit on unset variable.
set -u

. .env.prod

# Get current day of week (1=Monday, 5=Friday)
DAY_OF_WEEK=$(date +%u)

if [ "$DAY_OF_WEEK" -eq 5 ]; then
    # It's Friday, use today
    DAYS_UNTIL_FRIDAY=0
else
    # Calculate days until next Friday
    DAYS_UNTIL_FRIDAY=$((5 - DAY_OF_WEEK))
    if [ "$DAYS_UNTIL_FRIDAY" -lt 0 ]; then
        DAYS_UNTIL_FRIDAY=$((DAYS_UNTIL_FRIDAY + 7))
    fi
fi

FRIDAY_DATE=$(date -d "+${DAYS_UNTIL_FRIDAY} days" +%Y-%m-%d)
readonly FRIDAY_DATE

EST_PUBLISH_DATE=$(date -d "+${DAYS_UNTIL_FRIDAY} days" +%Y-%m-%dT00:00:00%:z)
readonly EST_PUBLISH_DATE

# Calculate previous Friday for GitHub query
if [ "$DAY_OF_WEEK" -eq 5 ]; then
    # It's Friday, get last Friday (7 days ago)
    DAYS_SINCE_LAST_FRIDAY=7
else
    # Calculate days since last Friday
    DAYS_SINCE_LAST_FRIDAY=$((DAY_OF_WEEK + 2))
fi

PREVIOUS_FRIDAY=$(date -d "-${DAYS_SINCE_LAST_FRIDAY} days" +%Y-%m-%d)
readonly PREVIOUS_FRIDAY

# Calculate 5 PM ET timestamp for the previous Friday
PREVIOUS_FRIDAY_5PM=$(date -d "-${DAYS_SINCE_LAST_FRIDAY} days 17:00" +%Y-%m-%dT17:00:00-04:00)
readonly PREVIOUS_FRIDAY_5PM

# Format for display messages
PREVIOUS_FRIDAY_DISPLAY=$(date -d "-${DAYS_SINCE_LAST_FRIDAY} days" +"%Y-%m-%d at 5:00 PM EDT")
readonly PREVIOUS_FRIDAY_DISPLAY

readonly WEEK_PATH="content/weeks/${FRIDAY_DATE}/index.md"

# GitHub API pagination settings
readonly GITHUB_PER_PAGE=100

# Function to fetch all pages of GitHub search results
fetch_github_search_all_pages() {
    local query="$1"
    local all_results=""
    local page=1

    while true; do
        local response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/search/issues?q=${query}&sort=updated&order=desc&per_page=${GITHUB_PER_PAGE}&page=${page}")

        local items=$(echo "$response" | jq -r '.items[]? | "\(.repository_url)\t- [\(.title)](\(.html_url))"')
        local items_count=$(echo "$response" | jq -r '.items | length')

        if [ -n "$items" ]; then
            all_results="${all_results}${items}"$'\n'
        fi

        # If we got fewer than GITHUB_PER_PAGE results, we've reached the end
        if [ "$items_count" -lt "$GITHUB_PER_PAGE" ]; then
            break
        fi

        page=$((page + 1))

        # Safety limit to prevent infinite loops
        if [ "$page" -gt 10 ]; then
            echo "Warning: Reached page limit (10) for GitHub search, some results may be missing" >&2
            break
        fi
    done

    echo "$all_results"
}

# Function to query GitHub for PRs
fetch_github_prs() {
    if [ -z "${GITHUB_TOKEN:-}" ]; then
        echo "Warning: GITHUB_TOKEN not set, skipping GitHub activity" >&2
        return 0
    fi

    # Get username from GitHub token
    echo "Fetching GitHub username from token..." >&2
    local username=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/user" | jq -r '.login // empty')

    if [ -z "$username" ]; then
        echo "Warning: Could not fetch GitHub username from token, skipping GitHub activity" >&2
        return 0
    fi

    echo "GitHub username: $username" >&2
    echo "Fetching GitHub activity since $PREVIOUS_FRIDAY_DISPLAY" >&2
    local since_date="$PREVIOUS_FRIDAY_5PM"

    # Query for authored PRs (with pagination)
    local authored_prs=$(fetch_github_search_all_pages "type:pr+author:${username}+updated:>=${since_date}")

    # Query for commented PRs (with pagination)
    local commented_prs=$(fetch_github_search_all_pages "type:pr+commenter:${username}+updated:>=${since_date}")

    # Query for reviewed PRs (with pagination)
    local reviewed_prs=$(fetch_github_search_all_pages "type:pr+reviewed-by:${username}+updated:>=${since_date}")

    # Combine, deduplicate, and group results
    local all_prs=$(echo -e "$authored_prs\n$commented_prs\n$reviewed_prs" | grep -v '^[[:space:]]*$' | sort -u)

    if [ -n "$all_prs" ]; then
        echo ""
        echo "## GitHub Activity"
        echo ""

        declare -A grouped_prs
        while IFS=$'\t' read -r repo_url pr_line; do
            repo_name=$(echo "$repo_url" | sed 's|https://api.github.com/repos/||')
            grouped_prs["$repo_name"]+="$pr_line"$'\n'
        done <<< "$all_prs"

        # Sort repositories by name and print PRs
        for repo_name in $(echo "${!grouped_prs[@]}" | tr ' ' '\n' | sort); do
            echo "### [$repo_name](https://github.com/$repo_name)"
            echo "${grouped_prs[$repo_name]}"
            echo ""
        done
    fi
}

# Function to query Codeberg for PRs
fetch_codeberg_prs() {
    if [ -z "${CODEBERG_TOKEN:-}" ]; then
        echo "Warning: CODEBERG_TOKEN not set, skipping Codeberg activity" >&2
        return 0
    fi

    # Get username from Codeberg token
    echo "Fetching Codeberg username from token..." >&2
    local username=$(curl -s -H "Authorization: token $CODEBERG_TOKEN" \
        "https://codeberg.org/api/v1/user" | jq -r '.login // empty')

    if [ -z "$username" ]; then
        echo "Warning: Could not fetch Codeberg username from token, skipping Codeberg activity" >&2
        return 0
    fi

    echo "Codeberg username: $username" >&2
    echo "Fetching Codeberg activity since $PREVIOUS_FRIDAY_DISPLAY" >&2
    local since_date="$PREVIOUS_FRIDAY_5PM"

    # Convert since_date to ISO format for comparison
    local since_timestamp=$(date -d "$since_date" +%s)

    # Get user activities to identify repositories with recent activity
    echo "Fetching recent Codeberg activities..." >&2
    local activities=$(curl -s -H "Authorization: token $CODEBERG_TOKEN" \
        "https://codeberg.org/api/v1/users/${username}/activities/feeds?limit=100")

    # Extract unique repository names from recent activities
    local active_repos=$(echo "$activities" | jq -r --arg since_date "$PREVIOUS_FRIDAY" \
        '.[]? | select(.created[:10] >= $since_date) | .repo.full_name' \
        2>/dev/null | sort -u)


    local all_prs=""
    local repo_count=0

    # Check PRs only for repositories with recent activity
    for repo in $active_repos; do
        if [ -n "$repo" ] && [ "$repo" != "null" ]; then
            repo_count=$((repo_count + 1))
            echo "Checking repository: $repo" >&2

            # Get recent PRs from this repository
            local repo_prs=$(curl -s -H "Authorization: token $CODEBERG_TOKEN" \
                "https://codeberg.org/api/v1/repos/${repo}/pulls?state=all&sort=updated&direction=desc&limit=10" \
                | jq -r --arg username "$username" --arg since_date "$since_date" \
                '.[]? | select((.updated_at >= $since_date) and
                              ((.user.login == $username) or
                               (.assignees[]?.login == $username) or
                               (.requested_reviewers[]?.login == $username))) |
                "\(.head.repo.full_name)\t- [\(.title)](\(.html_url))"' 2>/dev/null)

            if [ -n "$repo_prs" ] && [ "$repo_prs" != "null" ]; then
                all_prs="${all_prs}${repo_prs}"$'\n'
            fi
        fi
    done

    echo "Checked $repo_count repositories for Codeberg activity" >&2

    # Clean up, group, and print the output
    if [ -n "$all_prs" ]; then
        echo ""
        echo "## Codeberg Activity"
        echo ""

        declare -A grouped_prs
        while IFS=$'\t' read -r repo_name pr_line; do
            grouped_prs["$repo_name"]+="$pr_line"$'\n'
        done <<< "$(echo "$all_prs" | grep -v '^[[:space:]]*$' | sort -u)"

        # Sort repositories by name and print PRs
        for repo_name in $(echo "${!grouped_prs[@]}" | tr ' ' '\n' | sort); do
            echo "### [$repo_name](https://codeberg.org/$repo_name)"
            echo "${grouped_prs[$repo_name]}"
            echo ""
        done
    fi
}

hugo new "${WEEK_PATH}" \
  --clock "${EST_PUBLISH_DATE}"

# Append GitHub activity to the generated file
fetch_github_prs >> "${WEEK_PATH}"

# Append Codeberg activity to the generated file
fetch_codeberg_prs >> "${WEEK_PATH}"

code "${WEEK_PATH}"
